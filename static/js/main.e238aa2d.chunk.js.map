{"version":3,"sources":["componets/card/card.component.jsx","componets/card-list/card-list.component.jsx","componets/search-box/search-box.component.jsx","App.js","logo.svg","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SerachBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJbC,EAAW,SAAAR,GAAK,OAC1B,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHdM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAWF,MC6BJG,GCrCA,I,wDDOb,aAAc,IAAD,8BACX,gBACKC,MAAO,CACVR,SAAU,GACVS,YAAY,IAJH,E,qDAQf,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,oBAGzC,WAAU,IAAD,SACyBE,KAAKR,MAA9BR,EADA,EACAA,SAAUS,EADV,EACUA,YACXQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAAIA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBACpG,OACE,sBAAK3B,UAAU,MAAf,UACI,yCACA,cAAC,EAAD,CACEa,KAAK,SACLF,YAAa,kBACbC,aAAe,SAAAiB,GAAK,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,WAE1D,cAAC,EAAD,CAAUvB,SAAUiB,W,GA1BVO,cEMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e238aa2d.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./card.styles.css\"\r\n\r\nexport const Card = (props)=>(\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h1>{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import react from 'react';\r\nimport \"./card-list.styles.css\"\r\nimport {Card} from '../card/card.component';\r\nexport const CardList = props =>(\r\n   <div className=\"card-list\">\r\n     {props.monsters.map(monster =>(\r\n        <Card key={monster.id} monster={monster}></Card>\r\n     ))}  \r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport '../search-box/search-box.styles.css';\r\n\r\nexport const SerachBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className='search'\r\n        type=\"serach\" \r\n        placeholder ={placeholder} \r\n        onChange ={handleChange}\r\n    />\r\n);","import react, { Component} from 'react';\nimport {CardList} from './componets/card-list/card-list.component';\nimport {searchBox, SerachBox} from './componets/search-box/search-box.component';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state ={\n      monsters :[],\n      searchField:''\n    };\n  }\n\ncomponentDidMount(){\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then(response => response.json())\n  .then(users => this.setState({monsters:users}));\n}\n\nrender() {\n  const {monsters, searchField} = this.state;\n  const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n  return(\n    <div className=\"App\">\n        <h1>Monters</h1>\n        <SerachBox \n          type=\"serach\" \n          placeholder =\"search Monsters\" \n          handleChange ={e =>{this.setState({searchField:e.target.value})}}\n        />\n        <CardList monsters={filteredMonsters}/>\n    </div>\n    );\n  }\n}\nexport default App;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}